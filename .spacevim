let g:spacevim_plug_home = '~/.vim/plugged'
" let g:spacevim_leader = "<\Space>"
" let g:spacevim_localleader = ','
" let g:spacevim_enable_true_color = 1
let g:spacevim_nerd_fonts = 1

" Refer to https://github.com/liuchengxu/space-vim/blob/master/layers/LAYERS.md for all available layers.
let g:spacevim_layers = [
      \ 'fzf', 'better-defaults', 'ycmd', 'python',
      \  'lightline','syntax-checking', 'ctrlp',
      \ ]

function! UserInit()

  " ---- editing ----
  Plug 'tpope/vim-surround'
  Plug 'jiangmiao/auto-pairs'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-commentary'
  Plug 'scrooloose/nerdcommenter'
  Plug 'junegunn/vim-easy-align'
  Plug 'godlygeek/tabular' " function like easy-align

  " ---- lightline ----
  Plug 'itchyny/lightline.vim'
  Plug 'mengelbrecht/lightline-bufferline'
  Plug 'bling/vim-bufferline'

  " ---- interactive ----
  Plug 'liuchengxu/vim-clap'
  Plug 'itchyny/calendar.vim'
  " Plug 'junegunn/vim-emoji'
  " Plug 'johngrib/vim-game-code-break'
  " Plug 'wakatime/vim-wakatime'

  " ---- motion ----
  " Plug 'haya14busa/incsearch.vim'
  Plug 'easymotion/vim-easymotion'
  " Plug 'haya14busa/incsearch-easymotion.vim'
  " Plug 'justinmk/vim-sneak'
  Plug 'unblevable/quick-scope'

  " ---- css ----
  " Plug 'mattn/emmet-vim'
      "let g:user_emmet_install_global = 0
      "let g:user_emmet_leader_key=','
  " Plug 'jaxbot/browserlink.vim'
  Plug 'othree/csscomplete.vim'

  " ---- file-navigation ----
  " Plug 'scrooloose/nerdtree'
  " Plug 'ryanoasis/vim-devicons'
  Plug 'francoiscabrol/ranger.vim'
  " Plug 'vim-scripts/taglist.vim'
  Plug 'universal-ctags/ctags'
  Plug 'majutsushi/tagbar'
  Plug 'epmatsw/ag.vim'

  " ---- Theme ----
  Plug 'cocopon/iceberg.vim'
  " Plug 'whatyouhide/vim-gotham'
  " Plug 'chriskempson/base16-vim'
  " Plug 'arcticicestudio/nord-vim'
  " Plug 'dylanaraps/wal.vim'
  " Plug 'rakr/vim-two-firewatch'
  " Plug 'junegunn/seoul256.vim'

  Plug 'Yggdroot/indentLine'
    let g:indentLine_enabled=1
    let g:indentLine_char='▏'
    let g:indentLine_first_char='▏'
    let g:indentLine_color_gui="#55606d"
    let g:indentLine_showFirstIndentLevel=0
    let g:indentLine_faster=1
    
  Plug 'luochen1990/rainbow'
    let g:rainbow_active = 1 

  Plug 'junegunn/goyo.vim'
  Plug 'junegunn/limelight.vim'

  " ---- Language ----
  Plug 'gabrielelana/vim-markdown'
      let g:markdown_syntax_conceal = 0
      let g:markdown_enable_spell_checking = 0
      let g:markdown_enable_input_abbreviations = 1
      let g:markdown_enable_conceal = 1
      let g:markdown_enable_mappings = 1
  Plug 'iamcco/markdown-preview.vim'
  " Plug 'vim-scripts/c.vim'
  
  "Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
  Plug 'jeetsukumaran/vim-pythonsense'
  let g:pymode_run_bind = '<leader>r'
  let g:pymode_lint_cwindow = 1
  let g:pymode_rope_completion = 1
  let g:pymode_rope_complete_on_dot = 1
  let g:pymode_rope_completion_bind = '<C-Space>'
  let g:pymode_python = 'python3'

  Plug 'fatih/vim-go',{'do':':GoInstallBinaries'}
    let g:go_highlight_types = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_extra_types = 1
  Plug 'AndrewRadev/splitjoin.vim'

  " ---- Snippets ----
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
  Plug 'ervandew/supertab'
    " make YCM compatible with UltiSnips (using supertab)
    "let g:ycm_key_list_select_completion = ['<C-n>']
    "let g:ycm_key_list_previous_completion = ['<C-p>']
    let g:SuperTabDefaultCompletionType = '<C-n>'

    " better key bindings for UltiSnipsExpandTrigger
    let g:UltiSnipsExpandTrigger = "<c-space>"
    let g:UltiSnipsJumpForwardTrigger = "<C-j>"
    let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
    "let g:UltiSnipsListSnippets="<c-h>"
  endfunction

function! UserConfig()


  " ---- Theme  ----
  colorscheme iceberg
  "   Range:   233 (darkest) ~ 238 (lightest)
  "   Default: 235
  " let g:space_vim_dark_background = 233
  " color space-vim-dark

  " ---- lightline ----
  let g:lightline.colorscheme="iceberg"
  let g:lightline.tabline          = {'left': [['buffers']], 'right': [['close']]}
  let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
  let g:lightline.component_type   = {'buffers': 'tabsel'}
  let g:lightline#bufferline#filename_modifier = ':t'

  " ---- airline ----
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline#extensions#tabline#formatter = 'default'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#wordcount#filetypes = 'entersomerandomgibberish'
  let g:airline#extensions#tabline#enabled = 1
  
  " ---- Setting  ----
  set termguicolors
  set tags=tags
  set showtabline=1
  set laststatus=1
  set guioptions-=e
  set hidden
  set cmdheight=1
  "set noshowmode          "Disables mode in statusline in favor of airline
  
  " ---- Keybinding ----
  nmap <C-b> :b 
  nmap <F8> :TagbarToggle<CR>
 
  " ---- css ----
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci

  "hi ctermbg=NONE ctermfg=Green guibg=NONE guifg=Green
  " color scheme section
  " highlight Normal guibg=NONE ctermbg=NONE
  endfunction
